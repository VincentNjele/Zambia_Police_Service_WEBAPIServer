// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Zambia_Police_Service.WEB
{
    public partial class Zambia_Police_ServiceContext : IdentityDbContext
    {
        public Zambia_Police_ServiceContext()
        {
        }

        public Zambia_Police_ServiceContext(DbContextOptions<Zambia_Police_ServiceContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Complaints> Complaints { get; set; }
        public virtual DbSet<Crimes> Crimes { get; set; }
        public virtual DbSet<MissingPersons> MissingPersons { get; set; }
        public virtual DbSet<PoliceAdmins> PoliceAdmins { get; set; }
        public virtual DbSet<PoliceUsers> PoliceUsers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-7C8C1I1\\SQLEXPRESS;Initial Catalog=Zanbia_Police_Service;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Complaints>(entity =>
            {
                entity.HasKey(e => e.ComplaintId);

                entity.Property(e => e.ComplaintDescription).IsRequired();

                entity.Property(e => e.ComplaintLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.UserNumberNavigation)
                    .WithMany(p => p.Complaints)
                    .HasForeignKey(d => d.UserNumber)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Complaints_PoliceUsers");
            });

            modelBuilder.Entity<Crimes>(entity =>
            {
                entity.HasKey(e => e.CrimeId);

                entity.Property(e => e.CrimeLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CrimePath)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.UserNumberNavigation)
                    .WithMany(p => p.Crimes)
                    .HasForeignKey(d => d.UserNumber)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Crimes_PoliceUsers");
            });

            modelBuilder.Entity<MissingPersons>(entity =>
            {
                entity.HasKey(e => e.MissingPersonId);

                entity.Property(e => e.MissingPersonLocation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MissingPersonPath)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.UserNumberNavigation)
                    .WithMany(p => p.MissingPersons)
                    .HasForeignKey(d => d.UserNumber)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_MissingPersons_PoliceUsers");
            });

            modelBuilder.Entity<PoliceAdmins>(entity =>
            {
                entity.HasKey(e => e.AdminNumber);

                entity.Property(e => e.AdminNumber).ValueGeneratedNever();

                entity.Property(e => e.AdminAddress).IsRequired();

                entity.Property(e => e.AdminEmailAddress).IsRequired();

                entity.Property(e => e.AdminLocation).IsRequired();

                entity.Property(e => e.AdminName).IsRequired();

                entity.Property(e => e.AdminPosition).IsRequired();

                entity.Property(e => e.AdminWorkStation).IsRequired();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PoliceUsers>(entity =>
            {
                entity.HasKey(e => e.UserNumber);

                entity.Property(e => e.UserNumber).ValueGeneratedNever();

                entity.Property(e => e.UserEmailAddress)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserFullName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId).ValueGeneratedOnAdd();

                entity.Property(e => e.UserLocation)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}